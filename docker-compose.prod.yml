version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: cert_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-common_db}
      MYSQL_USER: ${MYSQL_USER:-cert_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-cert_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database:/docker-entrypoint-initdb.d
    command: 
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --innodb-buffer-pool-size=512M
      - --max-connections=200
      - --innodb-log-file-size=128M
      - --innodb-flush-log-at-trx-commit=2
      - --innodb-flush-method=O_DIRECT
    networks:
      - cert_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-password123}"]
      timeout: 20s
      retries: 10
      interval: 30s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: cert_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    networks:
      - cert_network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-redis123}", "ping"]
      timeout: 3s
      retries: 5
      interval: 10s

  # Spring Boot后端
  backend:
    build:
      context: ./spring-boot-backend
      dockerfile: Dockerfile
    container_name: cert_backend_prod
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE:-common_db}?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:-cert_user}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:-cert_password}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      VOLCENGINE_ACCESS_KEY: ${VOLCENGINE_ACCESS_KEY}
      VOLCENGINE_SECRET_KEY: ${VOLCENGINE_SECRET_KEY}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      # JVM参数
      JAVA_OPTS: >-
        -Xms512m 
        -Xmx1024m 
        -XX:+UseG1GC 
        -XX:G1HeapRegionSize=16m 
        -XX:+UseStringDeduplication
        -XX:+OptimizeStringConcat
        -XX:+UseCompressedOops
        -Djava.awt.headless=true
        -Dfile.encoding=UTF-8
        -Duser.timezone=Asia/Shanghai
    ports:
      - "8080:8080"
    volumes:
      - backend_logs:/app/logs
      - ./chrome-portable:/app/chrome-portable:ro
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cert_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      timeout: 10s
      retries: 5
      start_period: 60s
      interval: 30s

  # Vue前端
  frontend:
    build:
      context: ./vue-frontend
      dockerfile: Dockerfile
    container_name: cert_frontend_prod
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cert_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      timeout: 5s
      retries: 3
      interval: 30s

  # phpMyAdmin (可选，用于数据库管理)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: cert_phpmyadmin_prod
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password123}
      UPLOAD_LIMIT: 100M
    ports:
      - "8081:80"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - cert_network

  # Nginx反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: cert_nginx_prod
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - cert_network
    profiles:
      - ssl

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  cert_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
